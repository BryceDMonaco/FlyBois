<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sirenix.OdinInspector.Attributes</name>
    </assembly>
    <members>
        <member name="T:Sirenix.OdinInspector.AssetListAttribute">
             <summary>
             <para>AssetLists is used on lists and arrays, and replaces the default list drawer with a list of all possible assets with the specified filter.</para>
             <para>Use this to both filter and include or exclude assets from a list or an array, without navigating the project window.</para>
             </summary>
             <remarks>
             <para>Asset lists works on all asset types such as materials, scriptable objects, prefabs, custom components, audio, textures etc, and does also show inherited types.</para>
             </remarks>
             <example>
             <para>The following example will display an asset list of all prefabs located in the project window.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
                 [AssetList]
                 public GameObject[] MyPrefabs;
             }
             </code>
             </example>
             <example>
             <para>The following example shows various use cases for using the AssetListAttribute.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
                 // Lists all materials located in the '/Assets/MyMaterials/' folder.
                 [AssetList(Path = "/MyMaterials")]
                 public List&lt;Material&gt; MyMaterials;
            
                 // Lists all prefabs with the layer name 'MyLayerName' and a MyComponent attached.
                 [AssetList(LayerNames = "MyLayerName")]
                 public List&lt;MyComponent&gt; MyPrefabs;
            
            		// List all prefabs with the layer name 'LayerA' or 'LayerB'.
            		[AssetList(LayerNames= "LayerA, LayerB")]
            		public List&lt;GameObject&gt; MyPrefabs;
            
                 // Lists all assets of type MyScriptableObject which file name starts with 'prefix'.
                 [AssetList(AssetNamePrefix = "prefix")]
                 public List&lt;MyScriptableObject&gt; MyPrefabs;
            
                 // Lists all prefabs with the tag 'MyTag' located in the '/Assets/Prefabs/' folder.
                 [AssetList(Tags = "MyTag", Path="/Assets/Prefabs/")]
                 public List&lt;GameObject&gt; MyPrefabs;
            
                 // Lists all prefabs with the tag 'MyTagA' or 'MyTagB'
                 [AssetList(Tags = "MyTagA, MyTagB")]
                 public List&lt;GameObject&gt; MyPrefabs;
            
            		// List all prefabs with a "SomeComponent" attached.
            		[AssetList(CustomFilterMethod = "HasSomeComponent")]
                 public List&lt;GameObject&gt; MyPrefabs;
            
            		private bool HasSomeComponent(GameObject gameObject)
            		{
            			return gameObject.GetComponent&lt;SomeComponent&gt;() != null;
            		}
             }
             </code>
             </example>
        </member>
        <member name="M:Sirenix.OdinInspector.AssetListAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.AssetListAttribute"/> class.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.AssetListAttribute.AutoPopulate">
            <summary>
            <para>If <c>true</c>, all assets found and displayed by the asset list, will autoamatically be added to the list when inspected.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.AssetListAttribute.Tags">
            <summary>
            <para>Comma seperated list of tags to filter the asset list.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.AssetListAttribute.LayerNames">
            <summary>
            <para>Filter the asset list to only include assets with a specified layer.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.AssetListAttribute.AssetNamePrefix">
            <summary>
            <para>Filter the asset list to only include assets which name begins with.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.AssetListAttribute.Path">
            <summary>
            <para>Filter the asset list to only include assets which is located at the specified path.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.AssetListAttribute.CustomFilterMethod">
            <summary>
            <para>Filter the asset list to only include assets for which the given filter method returns true.</para>
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.AssetsOnlyAttribute">
            <summary>
            <para>AssetsOnly is used on object properties, and restricts the property to project assets, and not scene objects.</para>
            <para>Use this when you want to ensure an object is from the project, and not from the scene.</para>
            </summary>
            <example>
            <para>The following example shows a component with a game object property, that must be a prefab from the project, and not a scene object.</para>
            <code>
            public MyComponent : MonoBehaviour
            {
            	[AssetsOnly]
            	public GameObject MyPrefab;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.SceneObjectsOnlyAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.BoxGroupAttribute">
             <summary>
             <para>ButtonGroup is used on any property and organizes the property in a boxed group.</para>
             <para>Use this to cleanly organize relevant values together in the inspector.</para>
             </summary>
             <example>
             <para>The following example shows how BoxGroup is used to organize properties together into a box.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[BoxGroup("My box")]
            		public int A;
            
            		[BoxGroup("My box")]
            		public int B;
            
            		[BoxGroup("My box")]
            		public int C;
            	}
             </code>
             </example>
             <example>
             <para>The following example shows how properties can be organized into multiple groups.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[BoxGroup("Letters")]
            		public int A;
            
            		[BoxGroup("Letters")]
            		public int B;
            
            		[BoxGroup("Numbers")]
            		public int One;
            
            		[BoxGroup("Numbers")]
            		public int Two;
            	}
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.ButtonGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.FoldoutGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.HorizontalGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.BoxGroupAttribute.Label">
            <summary>
            Header label for the group.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.BoxGroupAttribute.ShowLabel">
            <summary>
            If <c>true</c> a label for the group will be drawn on top.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.BoxGroupAttribute.CenterLabel">
            <summary>
            If <c>true</c> the header label will be places in the center of the group header. Otherwise it will be in left side.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.BoxGroupAttribute.#ctor(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Adds the property to the specified box group.
            </summary>
            <param name="group">The box group.</param>
            <param name="showLabel">If <c>true</c> a label will be drawn for the group.</param>
            <param name="centerLabel">If set to <c>true</c> the header label will be centered.</param>
            <param name="order">The order of the group in the inspector.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.BoxGroupAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/> class. Use the other constructor overloads in order to show a header-label on the box group.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.BoxGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)">
            <summary>
            Combines the box group with another group.
            </summary>
            <param name="other">The other group.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ButtonAttribute">
            <summary>
            <para>Buttons are used on functions, and allows for clickable buttons in the inspector.</para>
            </summary>
            <example>
            <para>The following example shows a component that has an initialize method, that can be called from the inspector.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[Button]
            	private void Init()
            	{
            		// ...
            	}
            }
            </code>
            </example>
            <example>
            <para>The following example show how a Button could be used to test a function.</para>
            <code>
            public class MyBot : MonoBehaviour
            {
            	[Button]
            	private void Jump()
            	{
            		// ...
            	}
            }
            </code>
            </example>
            <example>
            <para>The following example show how a Button can named differently than the function it's been attached to.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[Button("Function")]
            	private void MyFunction()
            	{
            		// ...
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:Sirenix.OdinInspector.ButtonAttribute.Name">
            <summary>
            Use this to override the label on the button.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ButtonAttribute.#ctor">
            <summary>
            Creates a button in the inspector named after the method.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ButtonAttribute.#ctor(System.String)">
            <summary>
            Creates a button in the inspector with a custom name.
            </summary>
            <param name="name">Custom name for the button.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ButtonGroupAttribute">
            <summary>
            <para>ButtonGroup is used on any instance function, and adds buttons to the inspector organized into horizontal groups.</para>
            <para>Use this to organize multiple button in a tiddy horizontal group.</para>
            </summary>
            <example>
            <para>The following example shows how ButtonGroup is used to organize two buttons into one group.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[ButtonGroup("MyGroup")]
            	private void A()
            	{
            		// ..
            	}
            
            	[ButtonGroup("MyGroup")]
            	private void B()
            	{
            		// ..
            	}
            }
            </code>
            </example>
            <example>
            <para>The following example shows how ButtonGroup can be used to create multiple groups of buttons.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[ButtonGroup("First")]
            	private void A()
            	{ }
            
            	[ButtonGroup("First")]
            	private void B()
            	{ } 
            
            	[ButtonGroup("")]
            	private void One()
            	{ }
            
            	[ButtonGroup("")]
            	private void Two()
            	{ }
            
            	[ButtonGroup("")]
            	private void Three()
            	{ }
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.ButtonAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.FoldoutGroupAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HorizontalGroupAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.ButtonGroupAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Organizes the button into the specified button group.
            </summary>
            <param name="group">The group to organize the button into.</param>
            <param name="order">The order of the group in the inspector..</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ColorPaletteAttribute">
            <summary>
            <para>ColorPalette is used on any Color property, and allows for choosing colors from different definerable palettes.</para>
            <para>Use this to allow the user to choose from a set of predefined color options.</para>
            </summary>
            <remarks>
            <para>See and edit the color palettes in Window > Odin Inspector > Drawers > Color Palettes.</para>
            <note type="note">The color property is not tied to the color palette, and can be edited. Therefore the color will also not update if the ColorPalette is edited.</note>
            </remarks>
            <example>
            <para>The following example shows how ColorPalette is applied to a property. The user can freely choose between all available ColorPalettes.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[ColorPalette]
            	public Color MyColor;
            }
            </code>
            </example>
            <example>
            <para>The following example shows how a specific palette can be be set, to restrict the users color options to that palette.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[ColorPalette("Sepia")]
            	public Color MySepiaColor;
            }
            </code>
            </example>
            <seealso cref="!:ColorPalette"/>
        </member>
        <member name="M:Sirenix.OdinInspector.ColorPaletteAttribute.#ctor">
            <summary>
            Adds a color palette options to a Color property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ColorPaletteAttribute.#ctor(System.String)">
            <summary>
            Adds color options to a Color property from a specific palette.
            </summary>
            <param name="paletteName">Name of the palette.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.ColorPaletteAttribute.PaletteName">
            <summary>
            Gets the name of the palette.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ColorPaletteAttribute.ShowAlpha">
            <summary>
            Indicates if the color palette should show alpha values or not.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.CustomContextMenuAttribute">
             <summary>
             <para>CustomContextMenu is used on any property, and adds a custom options to the context menu for the property.</para>
             <para>Use this for when you want to add custom actions to the context menu of a property.</para>
             </summary>
             <remarks>
             <note type="note">CustomContextMenu currently does not support static functions.</note>
             </remarks>
             <example>
             <para>The following example shows how CustomContextMenu is used to add a custom option to a property.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[CustomContextMenu("My custom option", "MyAction")]
            		public Vector3 MyVector;
            
            		private void MyAction()
            		{
            			MyVector = Random.onUnitSphere;
            		}
            	}
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.DisableContextMenuAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.CustomContextMenuAttribute.#ctor(System.String,System.String)">
            <summary>
            Adds a custom option to the context menu of the property.
            </summary>
            <param name="menuItem">The name of the menu item.</param>
            <param name="methodName">The name of the callback method.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.CustomContextMenuAttribute.MenuItem">
            <summary>
            The name of the menu item.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.CustomContextMenuAttribute.MethodName">
            <summary>
            The name of the callback method.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute">
            <summary>
            <para>DetailedInfoBox is used on any property, and displays a message box that can be expanded to show more details.</para>
            <para>Use this to convey a message to a user, and give them the option to see more details.</para>
            </summary>
            <example>
            <para>The following example shows how DetailedInfoBox is used on a field.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[DetailedInfoBox("This is a message", "Here is some more details about that message")]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.DetailedInfoBoxAttribute.Message">
            <summary>
            The message for the message box.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.DetailedInfoBoxAttribute.Details">
            <summary>
            The hideable details of the message box.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.DetailedInfoBoxAttribute.InfoMessageType">
            <summary>
            Type of the message box.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.DetailedInfoBoxAttribute.VisibleIf">
            <summary>
            Optional name of a member to hide or show the message box.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.DetailedInfoBoxAttribute.#ctor(System.String,System.String,Sirenix.OdinInspector.InfoMessageType,System.String)">
            <summary>
            Displays a message box with hideable details.
            </summary>
            <param name="message">The message for the message box.</param>
            <param name="details">The hideable details of the message box.</param>
            <param name="infoMessageType">Type of the message box.</param>
            <param name="visibleIf">Optional name of a member to hide or show the message box.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.DisableContextMenuAttribute">
            <summary>
            <para>DisableContextMenu is used on any property and disables the context menu for that property.</para>
            <para>Use this if you do not want the context menu to be available for a property.</para>
            </summary>
            <example>
            <para>The following example shows how DisableContextMenu is used on a property.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[DisableContextMenu]
            	public Vector3 MyVector;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.CustomContextMenuAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.DisableContextMenuAttribute.DisableForMember">
            <summary>
            Whether to disable the context menu for the member itself.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.DisableContextMenuAttribute.DisableForCollectionElements">
            <summary>
            Whether to disable the context menu for collection elements.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.DisableContextMenuAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.DisableContextMenuAttribute" /> class.
            </summary>
            <param name="disableForMember">Whether to disable the context menu for the member itself.</param>
            <param name="disableCollectionElements">Whether to also disable the context menu of collection elements.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.DisableIfAttribute">
             <summary>
             <para>DisableIf is used on any property, and can disable or enable the property in the inspector.</para>
             <para>Use this to disable properties when they are irrelevant.</para>
             </summary>
             <example>
             <para>The following example shows how a property can be disabled by the state of a field.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		public bool DisableProperty;
            
            		[DisableIf("DisableProperty")]
            		public int MyInt;
             }
             </code>
             </example>
             <example>
             <para>The following examples show how a property can be disabled by a function.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[EnableIf("MyDisableFunction")]
            		public int MyInt;
            
            		private bool MyDisableFunction()
            		{
            			// ...
            		}
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.DisableIfAttribute.MemberName">
            <summary>
            The name of a bool member field, property or method.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.DisableIfAttribute.#ctor(System.String)">
            <summary>
            Disables a property in the inspector, based on the state of a member.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.DisableInEditorModeAttribute">
            <summary>
            <para>HideInEditorMode is used on any property, and disables the property when not in play mode.</para>
            <para>Use this when you only want a property to be editable when in play mode.</para>
            </summary>
            <example>
            <para>The following example shows how HideInEditorMode is used to disable a property when in the editor.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[HideInEditorMode]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.DisableInPlayModeAttribute">
            <summary>
            <para>DisableInPlayMode is used on any property, and disables the property when in play mode.</para>
            <para>Use this to prevent users from editing a property when in play mode.</para>
            </summary>
            <example>
            <para>The following example shows how DiableInPlayMode is used to disable a property when in play mode.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[DisableInPlayMode]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.HideInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.DisplayAsStringAttribute">
             <summary>
             <para>DisplayAsString is used on any property, and displays a string in the inspector as text.</para>
             <para>Use this for when you want to show a string in the inspector, but not allow for any editing.</para>
             </summary>
             <remarks>
             <para>DisplayAsString uses the property's ToString method to display the property as a string.</para>
             </remarks>
             <example>
             <para>The following example shows how DisplayAsString is used to display a string property as text in the inspector.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		[DisplayAsString]
            		public string MyInt = 5;
            
            		// You can combine with <see cref="T:Sirenix.OdinInspector.HideLabelAttribute"/> to display a message in the inspector.
            		[DisplayAsString, HideLabel]
            		public string MyMessage = "This string will be displayed as text in the inspector";
            	}
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.MultiLinePropertyAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.DontApplyToListElementsAttribute">
            <summary>
            <para>DontApplyToListElements is used on other attributes, and indicates that those attributes should be applied only to the list, and not to the elements of the list.</para>
            <para>Use this on attributes that should only work on a list or array property as a whole, and not on each element of the list.</para>
            </summary>
            <example>
            <para>The following example shows how DontApplyToListElements is used on <see cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>.</para>
            <code>
            [DontApplyToListElements]
            [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]
            public sealed class VisibleIfAttribute : Attribute
            {
                public string MemberName { get; private set; }
            
                public VisibleIfAttribute(string memberName)
                {
                    this.MemberName = memberName;
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Sirenix.OdinInspector.DrawWithUnityAttribute">
            <summary>
            <para>DrawWithUnity can be applied to a field or property to make Odin draw it using Unity's old drawing system. Use it if you want to selectively disable Odin drawing for a particular member.</para>
            </summary>
            <remarks>
            <para>Note that this attribute does not mean "disable Odin completely for this property"; it is visual only in nature, and in fact represents an Odin drawer which calls into Unity's old property drawing system. As Odin is still ultimately responsible for arranging the drawing of the property, and since other attributes exist with a higher priority than this attribute, and it is not guaranteed that Unity will draw the property if another attribute is present to override this one.</para>
            </remarks>
        </member>
        <member name="T:Sirenix.OdinInspector.ShowForPrefabOnlyAttribute">
            <summary>
            <para>ShowForPrefabOnlyAttribute is used on any field or property, and only shows properties from prefab assets inspector.</para>
            <para>Use this to ensure the same value on a property, across all instances of a prefab.</para>
            </summary>
            <remarks>
            <para>On non-prefab objects or instances, this attribute does nothing, and allows properties to be edited as normal.</para>
            </remarks>
            <example>
            <para>The following example shows how ShowForPrefabOnlyAttribute is used on properties.</para>
            <code>
            public class MyComponent
            {
            	[ShowForPrefabOnlyAttribute]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.EnableForPrefabOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.EnableForPrefabOnlyAttribute">
            <summary>
            <para>EnableForPrefabOnly is used on any field or property, and only allows editing of values from prefab assets inspector.</para>
            <para>Use this to ensure the same value on a property, across all instances of a prefab.</para>
            </summary>
            <remarks>
            <para>On non-prefab objects or instances, this attribute does nothing, and allows properties to be edited as normal.</para>
            </remarks>
            <example>
            <para>The following example shows how EnableForPrefabOnly is used on properties.</para>
            <code>
            public class MyComponent
            {
            	[EnableForPrefabOnly]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.EnableForPrefabOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.EnableIfAttribute">
             <summary>
             <para>EnableIf is used on any property, and can enable or disable the property in the inspector.</para>
             <para>Use this to enable properties when they are relevant.</para>
             </summary>
             <example>
             <para>The following example shows how a property can be enabled by the state of a field.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		public bool EnableProperty;
            
            		[EnableIf("EnableProperty")]
            		public int MyInt;
             }
             </code>
             </example>
             <example>
             <para>The following examples show how a property can be enabled by a function.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[EnableIf("MyEnableFunction")]
            		public int MyInt;
            
            		private bool MyEnableFunction()
            		{
            			// ...
            		}
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.EnableIfAttribute.MemberName">
            <summary>
            The name of a bool member field, property or method.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.EnableIfAttribute.#ctor(System.String)">
            <summary>
            Enables a property in the inspector, based on the state of a member.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.EnumToggleButtonsAttribute">
             <summary>
             <para>Draws an enum in a horizontal button group instead of a dropdown.</para>
             </summary>
             <example>
             <code>
             public class MyComponent : MonoBehvaiour
             {
            
                 [EnumToggleButtons]
                 public MyBitmaskEnum MyBitmaskEnum;
            
                 [EnumToggleButtons]
                 public MyEnum MyEnum;
             }
            
             [Flags]
             public enum MyBitmaskEnum
             {
                 A = 1 &lt;&lt; 1, // 1
                 B = 1 &lt;&lt; 2, // 2
                 C = 1 &lt;&lt; 3, // 4
                 ALL = A | B | C
             }
            
             public enum MyEnum
             {
                 A,
                 B,
                 C
             }
             </code>
             </example>
             <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Sirenix.OdinInspector.EnumToggleButtonsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.EnumToggleButtonsAttribute"/> class.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.HideIfAttribute">
             <summary>
             <para>HideIf is used on any property and can hide the property in the inspector.</para>
             <para>Use this to hide irrelevant properties based on the current state of the object.</para>
             </summary>
             <example>
             <para>This example shows a component with fields hidden by the state of another field.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		public bool ShowProperties;
            
            		[HideIf("showProperties")]
            		public int MyInt;
            
            		[HideIf("showProperties")]
            		public string MyString;
             }
             </code>
             </example>
             <example>
             <para>This example shows a component with a field that is hidden when the game object is inactive.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[HideIf("MyVisibleFunction")]
            		public int MyHideableField;
            
            		private bool MyVisibleFunction()
            		{
            			return this.gameObject.activeInHierarchy;
            		}
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.HideIfAttribute.MemberName">
            <summary>
            Name of a bool field, property or function to show or hide the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.HideIfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.HideIfAttribute"/> class.
            </summary>
            <param name="memberName">Name of a bool field, property or function to show or hide the property.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.HideInPlayModeAttribute">
            <summary>
            <para>HideInPlayMode is used on any property, and hides the property when not in editor mode.</para>
            <para>Use this when you only want a property to only be visible the editor.</para>
            </summary>
            <example>
            <para>The following example shows how HideInPlayMode is used to hide a property when in play mode.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[HideInPlayMode]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.HideInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.HideInEditorModeAttribute">
            <summary>
            <para>HideInEditorMode is used on any property, and hides the property when not in play mode.</para>
            <para>Use this when you only want a property to only be visible play mode.</para>
            </summary>
            <example>
            <para>The following example shows how HideInEditorMode is used to hide a property when in the editor.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[HideInEditorMode]
            	public int MyInt;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.HideInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.HideMonoScriptAttribute">
            <summary>
            Apply HideMonoScript to your class to prevent the Script property from being shown in the inspector.
            <remarks>
            <para>This attribute has the same effect on a single type that the global configuration option "Show Mono Script In Editor" in "Preferences -> Odin Inspector -> General -> Drawers" has globally when disabled.</para>
            </remarks>
            </summary>
            <example>
            <para>The following example shows how to use this attribute.</para>
            <code>
            [HideMonoScript]
            public class MyComponent : MonoBehaviour
            {
                // The Script property will not be shown for this component in the inspector
            }
            </code>
            </example>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Sirenix.OdinInspector.HideReferenceObjectPickerAttribute">
             <summary>
             Hides the polymorphic object-picker shown above the properties of non-Unity serialized reference types.
             </summary>
             <remarks>
             When the object picker is hidden, you can right click and set the instance to null, in order to set a new value.
             If you don't want this behavior, you can use <see cref="!:DisableContextMenu"/> attribute to ensure people can't change the value.
             </remarks>
             <seealso cref="!:Sirenix.Serialization.OdinSerializeAttribute"/>
             <example>
             <code>
             public class MyComponent : SerializedMonoBehaviour
             {
                 [Header("Hidden Object Pickers")]
                 [Indent]
                 [HideReferenceObjectPicker]
                 public MyCustomReferenceType OdinSerializedProperty1;
            
                 [Indent]
                 [HideReferenceObjectPicker]
                 public MyCustomReferenceType OdinSerializedProperty2;
            
                 [Indent]
                 [Header("Shown Object Pickers")]
                 public MyCustomReferenceType OdinSerializedProperty3;
            
                 [Indent]
                 public MyCustomReferenceType OdinSerializedProperty4;
            
                 public class MyCustomReferenceType
                 {
                     public int A;
                     public int B;
                     public int C;
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Sirenix.OdinInspector.HorizontalGroupAttribute">
             <summary>
             <para>HorizontalGroup is used group multiple properties horizontally in the inspector.</para>
             <para>The width can either be specified as percentage or pixels.</para>
             <para>All values between 0 and 1 will be treated as a percentage.</para>
             <para>If the width is 0 the column will be automatically sized.</para>
             <para>Margin-left and right can only be specified in pixels.</para>
             </summary>
             <example>
             <para>The following example shows how three properties have been grouped together horizontally.</para>
             <code>
                // Group 1
                [HorizontalGroup("Group 1")]
                public int A;
            
                [HorizontalGroup("Group 1")]
                public int B;
            
                [HorizontalGroup("Group 1")]
                public int C;
            
                // Group 2
                [HorizontalGroup("Group 2")]
                [HideLabel]
                public int D;
            
                [HorizontalGroup("Group 2", width: 0.6f)] // Percentage
                [HideLabel]
                public int E;
            
                // Group 3
                [HorizontalGroup("Group 3", width: 90)] // Pixels
                [HideLabel]
                public int F;
            
                [HorizontalGroup("Group 3", marginLeft: 20)] // Margin
                [HideLabel]
                public int G;
            
                // My Group
                [HorizontalGroup("My Group")]
                [AssetList(AssetNamePrefix = "Rock")]
                public GameObject[] Left;
            
                [HorizontalGroup("My Group")]
                [AssetList(AssetNamePrefix = "Rock")]
                public GameObject[] Right;
             </code>
             </example>
        </member>
        <member name="P:Sirenix.OdinInspector.HorizontalGroupAttribute.Width">
            <summary>
            An optional width for the property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.HorizontalGroupAttribute.MarginLeft">
            <summary>
            Gets the margin left.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.HorizontalGroupAttribute.MarginRight">
            <summary>
            Gets the margin right.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.HorizontalGroupAttribute.#ctor(System.String,System.Single,System.Int32,System.Int32)">
            <summary>
            Organizes the property in a horizontal group.
            </summary>
            <param name="group">The group for the property.</param>
            <param name="width">The width of the property. Values between 0 and 1 are interpolated as a percentage, otherwise pixels.</param>
            <param name="marginLeft">The left margin in pixels.</param>
            <param name="marginRight">The right margin in pixels.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.HorizontalGroupAttribute.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Organizes the property in a horizontal group.
            </summary>
            <param name="width">The width of the property. Values between 0 and 1 are interpolated as a percentage, otherwise pixels.</param>
            <param name="marginLeft">The left margin in pixels.</param>
            <param name="marginRight">The right margin in pixels.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.InlineEditorAttribute">
             <summary>
             <para>InlineAttribute is used on any property or field with a type that inherits from UnityEngine.Object. This includes components and assets etc.</para>
             </summary>
             <example>
             <code>
             public class InlineExamples : MonoBehaviour
             {
                 [InlineEditor]
                 public Transform InlineComponent;
            
                 [InlineEditor(InlineEditorModes.All)]
                 public Material FullInlineEditor;
            
                 [InlineEditor(InlineEditorModes.GUIAndHeader)]
                 public Material InlineMaterial;
            
                 [InlineEditor(InlineEditorModes.SmallPreview)]
                 public Material[] InlineMaterialList;
            
                 [InlineEditor(InlineEditorModes.LargePreview)]
                 public Mesh InlineMeshPreview;
             }
             </code>
             </example>
        </member>
        <member name="M:Sirenix.OdinInspector.InlineEditorAttribute.#ctor(Sirenix.OdinInspector.InlineEditorModes)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.InlineEditorAttribute" /> class.
            </summary>
            <param name="inlineEditorMode">The inline editor mode.</param>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorAttribute.Expanded">
            <summary>
            If true, the inline editor will start expanded.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorAttribute.DrawHeader">
            <summary>
            Draw the header editor header inline.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorAttribute.DrawGUI">
            <summary>
            Draw editor GUI inline.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorAttribute.DrawPreview">
            <summary>
            Draw editor preview inline.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorAttribute.PreviewWidth">
            <summary>
            The size of the editor preview if drawn together with GUI.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorAttribute.PreviewHeight">
            <summary>
            The size of the editor preview if drawn alone.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SuppressInvalidAttributeErrorAttribute">
             <summary>
             <para>SuppressInvalidAttributeError is used on members to suppress the inspector error message you get when applying an attribute to a value that it's not supposed to work on.</para>
             <para>This can be very useful for applying attributes to generic parameter values, when it only applies to some of the possible types that the value might become.</para>
             </summary>
             <example>
             <para>The following example shows a case where the attribute might be useful.</para>
             <code>
             public class NamedValue&lt;T&gt;
             {
                 public string Name;
            
                 // The Range attribute will be applied if T is compatible with it, but if T is not compatible, an error will not be shown.
            		[SuppressInvalidAttributeError, Range(0, 10)]
            		public T Value;
             }
             </code>
             </example>
        </member>
        <member name="T:Sirenix.OdinInspector.InlineEditorModes">
            <summary>
            Editor modes for <see cref="T:Sirenix.OdinInspector.InlineEditorAttribute" />
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.InlineEditorAttribute" />
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorModes.GUIOnly">
            <summary>
            Draws only the editor GUI
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorModes.GUIAndHeader">
            <summary>
            Draws the editor GUI and the editor header.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorModes.GUIAndPreview">
            <summary>
            Draws the editor GUI to the left, and a small editor preview to the right.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorModes.SmallPreview">
            <summary>
            Draws a small editor preview without any GUI.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorModes.LargePreview">
            <summary>
            Draws a large editor preview without any GUI.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InlineEditorModes.FullEditor">
            <summary>
            Draws the editor header and GUI to the left, and a small editor preview to the right.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.ShowDrawerChainAttribute">
            <summary>
            <para>
            ShowDrawerChain lists all prepend, append and value drawers being used in the inspector.
            This is great in situations where you want to debug, and want to know which drawers might be involved in drawing the property.</para>
            </summary>
            <example>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[ShowDrawerChain]
            	public int IndentedInt;
            }
            </code>
            </example>
        </member>
        <member name="T:Sirenix.OdinInspector.ShowOdinSerializedPropertiesInInspectorAttribute">
            <summary>
            Marks a type as being specially serialized. Odin uses this attribute to check whether it should include non-Unity-serialized members in the inspector.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.FoldoutGroupAttribute">
             <summary>
             <para>FoldoutGroup is used on any property, and organizes properties into a foldout.</para>
             <para>Use this to organize properties, and to allow the user to hide properties that are not relevant for them at the moment.</para>
             </summary>
             <example>
             <para>The following example shows how FoldoutGroup is used to organize properties into a foldout.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		[FoldoutGroup("MyGroup")]
            		public int A;
            
            		[FoldoutGroup("MyGroup")]
            		public int B;
            
            		[FoldoutGroup("MyGroup")]
            		public int C;
            	}
             </code>
             </example>
             <example>
             <para>The following example shows how properties can be organizes into multiple foldouts.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		[FoldoutGroup("First")]
            		public int A;
            
            		[FoldoutGroup("First")]
            		public int B;
            
            		[FoldoutGroup("Second")]
            		public int C;
            	}
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ButtonGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.PropertyGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.FoldoutGroupAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Adds the property to the specified foldout group.
            </summary>
            <param name="groupName">Name of the foldout group.</param>
            <param name="order">The order of the group in the inspector.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.FoldoutGroupAttribute.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Adds the property to the specified foldout group.
            </summary>
            <param name="groupName">Name of the foldout group.</param>
            <param name="expanded">Whether or not the foldout should be expanded by default.</param>
            <param name="order">The order of the group in the inspector.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.FoldoutGroupAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Adds the property to the specified foldout group.
            </summary>
            <param name="groupName">Name of the foldout group.</param>
            <param name="titleStringMemberName"></param>
            <param name="order">The order of the group in the inspector.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.FoldoutGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)">
            <summary>
            Combines the foldout property with another.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.FoldoutGroupAttribute.TitleStringMemberName">
            <summary>
            Name of any string field, property or function, to title the foldout in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.FoldoutGroupAttribute.Expanded">
            <summary>
            Gets a value indicating whether or not the foldout should be expanded by default..
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.FoldoutGroupAttribute.HasDefinedExpanded">
            <summary>
            Gets a value indicating whether or not the Expanded property has been set.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.GUIColorAttribute">
            <summary>
            <para>GUIColor is used on any property and changes the GUI color used to draw the property.</para>
            </summary>
            <example>
            <para>The following example shows how GUIColor is used on a properties to create a rainbow effect.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[HideLabel]
            	[GUIColor(1f, 0f, 0f)]
            	public int A;
            
            	[HideLabel]
            	[GUIColor(1f, 0.5f, 0f)]
            	public int B;
            
            	[HideLabel]
            	[GUIColor(1f, 1f, 0f)]
            	public int C;
            
            	[HideLabel]
            	[GUIColor(0f, 1f, 0f)]
            	public int D;
            
            	[HideLabel]
            	[GUIColor(0f, 1f, 1f)]
            	public int E;
            
            	[HideLabel]
            	[GUIColor(0f, 0f, 1f)]
            	public int F;
            	
            	[HideLabel]
            	[GUIColor(1f, 0f, 1f)]
            	public int G;
            }
            </code>
            </example>
        </member>
        <member name="P:Sirenix.OdinInspector.GUIColorAttribute.Color">
            <summary>
            The GUI color of the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.GUIColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the GUI color for the property.
            </summary>
            <param name="r">The red channel.</param>
            <param name="g">The green channel.</param>
            <param name="b">The blue channel.</param>
            <param name="a">The alpha channel.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.HideLabelAttribute">
            <summary>
            <para>HideLabel is used on any property, and hides the label in the inspector.</para>
            <para>Use this to hide the label of properties in the inspector.</para>
            </summary>
            <example>
            <para>The following example show how HideLabel is used to hide the label of a game object property.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[HideLabel]
            	public GameObject MyGameObjectWithoutLabel;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.IndentAttribute">
            <summary>
            <para>Indent is used on any property and moves the property's label to the right.</para>
            <para>Use this to clearly organize properties in the inspector.</para>
            </summary>
            <example>
            <para>The following example shows how a property is indented by Indent.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[Indent]
            	public int IndentedInt;
            }
            </code>
            </example>
        </member>
        <member name="P:Sirenix.OdinInspector.IndentAttribute.IndentLevel">
            <summary>
            Indicates how much a property should be indented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.IndentAttribute.#ctor(System.Int32)">
            <summary>
            Indents a property in the inspector.
            </summary>
            <param name="indentLevel">How much a property should be indented.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.InfoBoxAttribute">
             <summary>
             <para>InfoBox is used on any property, and display a text box above the property in the inspector.</para>
             <para>Use this to add comments or warn about the use of different properties.</para>
             </summary>
             <example>
             <para>The following example shows different info box types.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[InfoBox("This is an int property")]
            		public int MyInt;
            
            		[InfoBox("This info box is a warning", InfoBoxType.Warning)]
            		public float MyFloat;
            
            		[InfoBox("This info box is an error", InfoBoxType.Error)]
            		public object MyObject;
            
             	[InfoBox("This info box is just a box", InfoBoxType.None)]
            		public Vector3 MyVector;
            	}
             </code>
             </example>
             <example>
             <para>The following example how info boxes can be hidden by fields and properties.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[InfoBox("This info box is hidden by an instance field.", "InstanceShowInfoBoxField")]
            		public int MyInt;
            		public bool InstanceShowInfoBoxField;
            
            		[InfoBox("This info box is hideable by a static field.", "StaticShowInfoBoxField")]
            		public float MyFloat;
            		public static bool StaticShowInfoBoxField;
            
            		[InfoBox("This info box is hidden by an instance property.", "InstanceShowInfoBoxProperty")]
            		public int MyOtherInt;
             	public bool InstanceShowInfoBoxProperty { get; set; }
            
            		[InfoBox("This info box is hideable by a static property.", "StaticShowInfoBoxProperty")]
            		public float MyOtherFloat;
            		public static bool StaticShowInfoBoxProperty { get; set; }
             }
             </code>
             </example>
             <example>
             <para>The following example shows how info boxes can be hidden by functions.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[InfoBox("This info box is hidden by an instance function.", "InstanceShowFunction")]
            		public int MyInt;
            		public bool InstanceShowFunction()
            		{
            			return this.MyInt == 0;
            		}
            
            		[InfoBox("This info box is hidden by a static function.", "StaticShowFunction")]
            		public short MyShort;
            		public bool StaticShowFunction()
            		{
            			return true;
            		}
            
            		// You can also specify a function with the same type of parameter.
            		// Use this to specify the same function, for multiple different properties.
            		[InfoBox("This info box is hidden by an instance function with a parameter.", "InstanceShowParameterFunction")]
            		public GameObject MyGameObject;
            		public bool InstanceShowParameterFunction(GameObject property)
            		{
            			return property != null;
            		}
            
            		[InfoBox("This info box is hidden by a static function with a parameter.", "StaticShowParameterFunction")]
            		public Vector3 MyVector;
            		public bool StaticShowParameterFunction(Vector3 property)
            		{
            			return property.magnitude == 0f;
            		}
            	}
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.InfoBoxAttribute.Message">
            <summary>
            The message to display in the info box.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.InfoBoxAttribute.InfoMessageType">
            <summary>
            The type of the message box.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.InfoBoxAttribute.VisibleIf">
            <summary>
            Optional member field, property or function to show and hide the info box.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.InfoBoxAttribute.#ctor(System.String,Sirenix.OdinInspector.InfoMessageType,System.String)">
            <summary>
            Displays an info box above the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.InfoBoxAttribute.#ctor(System.String,System.String)">
            <summary>
            Displays an info box above the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.MinMaxSliderAttribute">
            <summary>
            <para>Draw a special slider the user can use to specify a range between a min and a max value.</para>
            <para>Uses a Vector2 where x is min and y is max.</para>
            </summary>
            <example>
            <para>The following example shows how MinMaxSlider is used.</para>
            <code>
            public class Player : MonoBehaviour
            {
            	[MinMaxSlider(4, 5)]
            	public Vector2 SpawnRadius;
            }
            </code>
            </example>
        </member>
        <member name="P:Sirenix.OdinInspector.MinMaxSliderAttribute.MinValue">
            <summary>
            The min value for the slider.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.MinMaxSliderAttribute.MaxValue">
            <summary>
            The max value for the slider.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.MinMaxSliderAttribute.ShowFields">
            <summary>
            Draw float fields for min and max value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.MinMaxSliderAttribute.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Draws a min-max slider in the inspector. X will be set to min, and Y will be set to max.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.ToggleLeftAttribute">
            <summary>
            <para>Draws the checkbox before the label instead of after.</para>
            </summary>
            <remarks>ToggleLeftAttribute can be used an all fields and properties of type boolean</remarks>
            <example>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[ToggleLeft]
            	public bool MyBoolean;
            }
            </code>
            </example>
        </member>
        <member name="T:Sirenix.OdinInspector.LabelTextAttribute">
             <summary>
             <para>LabelText is used to change the labels of properties.</para>
             <para>Use this if you want a different label than the name of the property.</para>
             </summary>
             <example>
             <para>The following example shows how LabelText is applied to a few property fields.</para>
             <code>
             public MyComponent : MonoBehaviour
             {
            		[LabelText("1")]
            		public int MyInt1;
            
            		[LabelText("2")]
            		public int MyInt2;
            
            		[LabelText("3")]
            		public int MyInt3;
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.LabelTextAttribute.#ctor(System.String)">
            <summary>
            Give a property a custom label.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.LabelTextAttribute.Text">
            <summary>
            The new text of the label.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.ListDrawerSettingsAttribute">
            <summary>
            Customize the behavior for lists and arrays in the inspector.
            </summary>
            <remarks>
            This attribute is scheduled for refactoring.
            </remarks>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.ShowPaging">
            <summary>
            Override the default setting specified in the Advanced Odin Preferences window and explicitly tell weather paging should be enabled or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.DraggableItems">
            <summary>
            Override the default setting specified in the Advanced Odin Preferences window and explicitly tell weather items should be draggable or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.IsReadOnly">
            <summary>
            Mark a list as read-only. This removes all editing capabilities from the list such as Add, Drag and delete,
            but without disabling GUI for each element drawn as other wise would be the case if the <see cref="T:Sirenix.OdinInspector.ReadOnlyAttribute"/> was used.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.ShowItemCount">
            <summary>
            Override the default setting specified in the Advanced Odin Preferences window and explicitly tell weather or not item count should be shown.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.Expanded">
            <summary>
            Override the default setting specified in the Advanced Odin Preferences window and explicitly tell weather or not the list should be expanded or collapsed by default.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.OnTitleBarGUI">
            <summary>
            Use this to inject custom GUI into the title-bar of the list.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.ShowIndexLabels">
            <summary>
            If true, a label is drawn for each element which shows the index of the element.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.PagingHasValue">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.ShowItemCountHasValue">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.DraggableHasValue">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.IsReadOnlyHasValue">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ListDrawerSettingsAttribute.ExpandedHasValue">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.MaxValueAttribute">
            <summary>
            <para>MaxValue is used on primitive fields. It caps value of the field to a maximum value.</para>
            <para>Use this to define a maximum value for the field.</para>
            </summary>
            <remarks>
            <note type="note">Note that this attribute only works in the editor! Values changed from scripting will not be capped at a maximum.</note>
            </remarks>
            <example>
            <para>The following example shows a component where a speed value must be less than or equal to 200.</para>
            <code>
            public class Car : MonoBehaviour
            {
            	// The speed of the car must be less than or equal to 200.
            	[MaxValue(200)]
            	public float Speed;
            }
            </code>
            </example>
            <example>
            <para>The following example shows how MaxValue can be combined with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.</para>
            <code>
            public class Health : MonoBehaviour
            {
            	// The speed value must be between 0 and 200.
            	[MinValue(0), MaxValue(200)]
            	public float Speed;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.MaxValueAttribute.MaxValue">
            <summary>
            The maximum value for the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.MaxValueAttribute.#ctor(System.Double)">
            <summary>
            Sets a maximum value for the property in the inspector.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.MinValueAttribute">
            <summary>
            <para>MinValue is used on primitive fields. It caps value of the field to a minimum value.</para>
            <para>Use this to define a minimum value for the field.</para>
            </summary>
            <remarks>
            <note type="note">Note that this attribute only works in the editor! Values changed from scripting will not be capped at a minimum.</note>
            </remarks>
            <example>
            <para>The following example shows a player component that must have atleast 1 life.</para>
            <code>
            public class Player : MonoBehaviour
            {
            	// The life value must be set to atleast 1.
            	[MinValue(1)]
            	public int Life;
            }
            </code>
            </example>
            <example>
            <para>The following example shows how MinValue can be combined with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/></para>
            <code>
            public class Health : MonoBehaviour
            {
            	// The health value must be between 0 and 100.
            	[MinValue(0), MaxValue(100)]
            	public float Health;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.MinValueAttribute.MinValue">
            <summary>
            The minimum value for the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.MinValueAttribute.#ctor(System.Double)">
            <summary>
            Sets a minimum value for the property in the inspector.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.MultiLinePropertyAttribute">
            <summary>
            <para>MultiLineProperty is used on any string property</para>
            <para>Use this to allow users to edit strings in a multi line textbox.</para>
            </summary>
            <remarks>
            <para>MultiLineProperty is similar to Unity's <see cref="T:UnityEngine.MultilineAttribute"/> but can be applied to both fields and properties.</para>
            </remarks>
            <example>
            <para>The following example shows how MultiLineProperty is applied to properties.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[MultiLineProperty]
            	public string MyString;
            
            	[ShowInInspector, MultiLineProperty(10)]
            	public string PropertyString { get; set; }
            }
            </code>
            </example>
        </member>
        <member name="P:Sirenix.OdinInspector.MultiLinePropertyAttribute.Lines">
            <summary>
            The number of lines for the text box.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.MultiLinePropertyAttribute.#ctor(System.Int32)">
            <summary>
            Makes a multiline textbox for editing strings.
            </summary>
            <param name="lines">The number of lines for the text box.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.PropertyTooltipAttribute">
             <summary>
             <para>PropertyTooltip is used on any property, and creates tooltips for when hovering the property in the inspector.</para>
             <para>Use this to explain the purpose, or how to use a property.</para>
             </summary>
             <remarks>
             <para>This is similar to Unity's <see cref="T:UnityEngine.TooltipAttribute"/> but can be applied to both fields and properties.</para>
             </remarks>
             <example>
             <para>The following example shows how PropertyTooltip is applied to various properties.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[PropertyTooltip("This is an int property.")]
            		public int MyField;
            
            		[ShowInInspector, PropertyTooltip("This is another int property.")]
            		public int MyProperty { get; set; }
            	}
             </code>
             </example>
             <seealso cref="T:UnityEngine.TooltipAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.PropertyTooltipAttribute.Tooltip">
            <summary>
            The message shown in the tooltip.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.PropertyTooltipAttribute.#ctor(System.String)">
            <summary>
            Adds a tooltip to the property in the inspector.
            </summary>
            <param name="tooltip">The message shown in the tooltip.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ReadOnlyAttribute">
             <summary>
             <para>ReadOnly is used on any property, and disabled the property from being changed in the inspector.</para>
             <para>Use this for when you want to see the value of a property in the inspector, but don't want it to be changed.</para>
             </summary>
             <remarks>
             <para>If more clarifycation is needed write it here</para>
             <note type="note">This attribute only affects the inspector! Values can still be changed by script.</note>
             </remarks>
             <example>
             <para>The following example shows how a field can be displayed in the editor, but not be editable.</para>
             <code>
             public class Health : MonoBehaviour
             {
            		public int MaxHealth;
            
            		[ReadOnly]
            		public int CurrentHealth;
             }
             </code>
             </example>
             <example>
             <para>ReadOnly can also be combined with <see cref="T:Sirenix.OdinInspector.ShowInInspectorAttribute"/>.</para>
             <code>
             public class Health : MonoBehaviour
             {
            		public int MaxHealth;
            
            		[ShowInInspector, ReadOnly]
            		private int currentHealth;
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.ShowInInspectorAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.OnInspectorGUIAttribute">
             <summary>
             <para>OnInspectorGUI is used on any property, and will call the specified function whenever the inspector code is running.</para>
             <para>Use this to create custom inspector GUI for an object.</para>
             </summary>
             <example>
             <para></para>
             <code>
             public MyComponent : MonoBehaviour
             {
            		[OnInspectorGUI]
            		private void MyInspectorGUI()
            		{
            			GUILayout.Label("Label drawn from callback");
            		}
             }
             </code>
             </example>
             <example>
            	<para>The following example shows how a callback can be set before another property.</para>
             <code>
             public MyComponent : MonoBehaviour
             {
            		[OnInspectorGUI("MyInspectorGUI", false)]
            		public int MyField;
            
            		private void MyInspectorGUI()
            		{
            			GUILayout.Label("Label before My Field property");
            		}
             }
             </code>
             </example>
        </member>
        <member name="M:Sirenix.OdinInspector.OnInspectorGUIAttribute.#ctor">
            <summary>
            Calls the function when the inspector is being drawn.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.OnInspectorGUIAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Adds callback to the specified method when the property is being drawn.
            </summary>
            <param name="methodName">The name of the member function.</param>
            <param name="append">If <c>true</c> the method will be called after the property has been drawn. Otherwise the method will be called before.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.OnInspectorGUIAttribute.Append">
            <summary>
            If <c>true</c> the method will be called after the property has been drawn. Otherwise the method will be called before.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.OnInspectorGUIAttribute.MethodName">
            <summary>
            The name of the method to be called.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.OnValueChangedAttribute">
             <summary>
             <para>OnValueChanged is used on any property, and calls the specified function whenever the value of the property is changed.</para>
             <para>Use this to do custom logic whenever the property is changed.</para>
             </summary>
             <remarks>
             <note type="note">Note that this attribute only works in the editor! Properties changed by script will not call the function.</note>
             </remarks>
             <example>
             <para>The following example shows how OnValueChanged is used to provide a callback for a property.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[OnValueChanged("MyCallback")]
            		public int MyInt;
            
            		private void MyCallback()
            		{
            			// ..
            		}
             }
             </code>
             </example>
             <example>
             <para>The following example show how OnValueChanged can be used to get a component from a prefab property.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[OnValueChanged("OnPrefabChange")]
            		public GameObject MyPrefab;
            
            		// RigidBody component of MyPrefab.
            		[SerializeField, HideInInspector]
            		private RigidBody myPrefabRigidbody;
            
            		private void OnPrefabChange()
            		{
            			if(MyPrefab != null)
            			{
            				myPrefabRigidbody = MyPrefab.GetComponent&lt;Rigidbody&gt;();
            			}
            			else
            			{
            				myPrefabRigidbody = null;
            			}
            		}
             }
             </code>
             </example>
        </member>
        <member name="P:Sirenix.OdinInspector.OnValueChangedAttribute.MethodName">
            <summary>
            Name of callback member function.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.OnValueChangedAttribute.IncludeChildren">
            <summary>
            Whether to invoke the method when a child value of the property is changed.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.OnValueChangedAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Adds a callback for when the property's value is changed.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="includeChildren">Whether to invoke the method when a child value of the property is changed.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.PropertyGroupAttribute">
             <summary>
             <para>Attribute to derive from if you wish to create a new property group type, such as box groups or tab groups.</para>
             <note type="note">Note that this attribute has special behaviour for "combining" several attributes into one, as one group,
             may be declared across attributes in several members, completely out of order. See <see cref="M:Sirenix.OdinInspector.PropertyGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)"/>.</note>
             </summary>
            
             <remarks>
             <para>All group attributes for a group with the same name (and of the same attribute type) are combined into a single representative group attribute using the <see cref="M:Sirenix.OdinInspector.PropertyGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)"/> method, which is called by the <see cref="M:Sirenix.OdinInspector.PropertyGroupAttribute.Combine(Sirenix.OdinInspector.PropertyGroupAttribute)"/> method.</para>
             <para>This behaviour is a little unusual, but it is important that you understand it when creating groups with many custom parameters that may have to be combined.</para>
             </remarks>
            
             <example>
             <para>This example shows how <see cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/> could be implemented.</para>
             <code>
             [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
             public class BoxGroupAttribute : PropertyGroupAttribute
             {
                 public string Label { get; private set; }
                 public bool ShowLabel { get; private set; }
                 public bool CenterLabel { get; private set; }
            
                 public BoxGroupAttribute(string group, bool showLabel = true, bool centerLabel = false, int order = 0)
                     : base(group, order)
                 {
                     this.Label = group;
                     this.ShowLabel = showLabel;
                     this.CenterLabel = centerLabel;
                 }
            
                 protected override void CombineValuesWith(PropertyGroupAttribute other)
                 {
                     // The given attribute parameter is *guaranteed* to be of type BoxGroupAttribute.
                     var attr = other as BoxGroupAttribute;
            
                     // If this attribute has no label, we the other group's label, thus preserving the label across combines.
                     if (this.Label == null)
                     {
                         this.Label = attr.Label;
                     }
            
                     // Combine ShowLabel and CenterLabel parameters.
                     this.ShowLabel |= attr.ShowLabel;
                     this.CenterLabel |= attr.CenterLabel;
                 }
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ButtonGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.FoldoutGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.PropertyGroupAttribute.GroupID">
            <summary>
            The ID used to grouping properties together.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.PropertyGroupAttribute.Order">
            <summary>
            The order of the group.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.PropertyGroupAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.PropertyGroupAttribute"/> class.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="order">The group order.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.PropertyGroupAttribute.Combine(Sirenix.OdinInspector.PropertyGroupAttribute)">
            <summary>
            Combines this attribute with another attribute of the same type. This method invokes the virtual <see cref="M:Sirenix.OdinInspector.PropertyGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)"/> method to invoke custom combine logic.
            </summary>
            <param name="other">The attribute to combine with.</param>
            <returns>The instance that the method was invoked on.</returns>
            <exception cref="T:System.ArgumentNullException">The argument 'other' was null.</exception>
            <exception cref="T:System.ArgumentException">
            Attributes to combine are not of the same type.
            or
            PropertyGroupAttributes to combine must have the same group id.
            </exception>
        </member>
        <member name="M:Sirenix.OdinInspector.PropertyGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)">
             <summary>
             <para>Override this method to add custom combine logic to your group attribute. This method determines how your group's parameters combine when spread across multiple attribute declarations in the same class.</para>
             <para>Rememember, in .NET, member order is not guaranteed, so you never know which order your attributes will be combined in.</para>
             </summary>
             <param name="other">The attribute to combine with. This parameter is guaranteed to be of the correct attribute type.</param>
             <example>
             <para>This example shows how <see cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/> attributes are combined.</para>
             <code>
             protected override void CombineValuesWith(PropertyGroupAttribute other)
             {
                 // The given attribute parameter is *guaranteed* to be of type BoxGroupAttribute.
                 var attr = other as BoxGroupAttribute;
            
                 // If this attribute has no label, we the other group's label, thus preserving the label across combines.
                 if (this.Label == null)
                 {
                     this.Label = attr.Label;
                 }
            
                 // Combine ShowLabel and CenterLabel parameters.
                 this.ShowLabel |= attr.ShowLabel;
                 this.CenterLabel |= attr.CenterLabel;
             }
             </code>
             </example>
        </member>
        <member name="T:Sirenix.OdinInspector.PropertyOrderAttribute">
            <summary>
            <para>PropertyOrder is used on any property, and allows for ordering of properties.</para>
            <para>Use this to define in which order your properties are shown.</para>
            </summary>
            <remarks>
            <para>Lower order values will be drawn before higher values.</para>
            <note type="note">There is unfortunately no way of ensuring that properties are in the same order, as they appear in your class. PropertyOrder overcomes this.</note>
            </remarks>
            <example>
            <para>The following example shows how PropertyOrder is used to order properties in the inspector.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[PropertyOrder(1)]
            	public int MySecondProperty;
            
            	[PropertyOrder(-1)]
            	public int MyFirstProperty;
            }
            </code>
            </example>    
        </member>
        <member name="P:Sirenix.OdinInspector.PropertyOrderAttribute.Order">
            <summary>
            The order for the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.PropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Defines a custom order for the property.
            </summary>
            <param name="order">The order for the property.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.RequiredAttribute">
             <summary>
             <para>Required is used on any object property, and draws a message in the inspector if the property is missing.</para>
             <para>Use this to clearly mark fields as nessessary to the object.</para>
             </summary>
             <example>
             <para>The following example shows different uses of the Required attribute.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[Required]
            		public GameObject MyPrefab;
            
            		[Required(InfoMessageType.Warning)]
            		public Texture2D MyTexture;
            
            		[Required("MyMesh is nessessary for this component.")]
            		public Mesh MyMesh;
            
            		[Required("MyTransform might be important.", InfoMessageType.Info)]
            		public Transform MyTransform;
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.RequiredAttribute.#ctor">
            <summary>
            Adds an error box to the inspector, if the property is missing.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.RequiredAttribute.#ctor(System.String,Sirenix.OdinInspector.InfoMessageType)">
            <summary>
            Adds an info box to the inspector, if the property is missing.
            </summary>
            <param name="errorMessage">The message to display in the error box.</param>
            <param name="messageType">The type of info box to draw.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.RequiredAttribute.#ctor(System.String)">
            <summary>
            Adds an error box to the inspector, if the property is missing.
            </summary>
            <param name="errorMessage">The message to display in the error box.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.RequiredAttribute.#ctor(Sirenix.OdinInspector.InfoMessageType)">
            <summary>
            Adds an info box to the inspector, if the property is missing.
            </summary>
            <param name="messageType">The type of info box to draw.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.RequiredAttribute.ErrorMessage">
            <summary>
            The message of the info box.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.RequiredAttribute.MessageType">
            <summary>
            The type of the info box.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SceneObjectsOnlyAttribute">
            <summary>
            <para>SceneObjectsOnly is used on object properties, and restricts the property to scene objects, and not project assets.</para>
            <para>Use this when you want to ensure an object is a scene object, and not from a project asset.</para>
            </summary>
            <example>
            <para>The following example shows a component with a game object property, that must be from a scene, and not a prefab asset.</para>
            <code>
            public MyComponent : MonoBehaviour
            {
            	[SceneObjectsOnly]
            	public GameObject MyPrefab;
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.AssetsOnlyAttribute"/>
        </member>
        <member name="T:Sirenix.OdinInspector.ValueDropdownAttribute">
             <summary>
             <para>ValueDropdown is used on any property and creates a dropdown with configurable options.</para>
             <para>Use this to give the user a specific set of options to select from.</para>
             </summary>
             <remarks>
             <note type="note">Due to a bug in Unity, enums will sometimes not work correctly. The last example shows how this can be fixed.</note>
             </remarks>
             <example>
             <para>The following example shows a how the ValueDropdown can be used on an int property.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		[ValueDropdown("myValues")]
            		public int MyInt;
            
            		// The selectable values for the dropdown.
            		private int[] myValues = { 1, 2, 3 };
            	}
             </code>
             </example>
             <example>
             <para>The following example shows how ValueDropdownList can be used for objects, that do not implement a usable ToString.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[ValueDropdown("myVectorValues")]
            		public Vector3 MyVector;
            
            		// The selectable values for the dropdown, with custom names.
            		private ValueDropdownList&lt;Vector3&gt; myVectorValues = new ValueDropdownList&lt;Vector3&gt;()
            		{
            			{"Forward",	Vector3.forward	},
            			{"Back",	Vector3.back	},
            			{"Up",		Vector3.up		},
            			{"Down",	Vector3.down	},
            			{"Right",	Vector3.right	},
            			{"Left",	Vector3.left	},
            		};
             }
             </code>
             </example>
            	<example>
            	<para>The following example shows how the ValueDropdown can on any member that implements IList.</para>
            	<code>
             public class MyComponent : MonoBehaviour
             {
            		// Member field of type float[].
            		private float[] valuesField;
            
            		[ValueDropdown("valuesField")]
            		public float MyFloat;
            
            		// Member property of type List&lt;thing&gt;.
            		private List&lt;string&gt; ValuesProperty { get; set; }
            
            		[ValueDropdown("ValuesProperty")]
            		public string MyString;
            
            		// Member function that returns an object of type IList.
            		private IList ValuesFunction()
            		{
            			return new ValueDropdownList&lt;int&gt;
            			{
            				{ "The first option",	1 },
            				{ "The second option",	2 },
            				{ "The third option",	3 },
            			};
            		}
            
            		[ValueDropdown("ValuesFunction")]
            		public int MyInt;
             }
             </code>
             </example>
             <example>
             <para>Due to a bug in Unity, enums member arrays will in some cases appear as empty. This example shows how you can get around that.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		// Make the field static.
            		private static MyEnum[] MyStaticEnumArray = MyEnum[] { ... };
            
            		// Force Unity to serialize the field, and hide the property from the inspector.
            		[SerializeField, HideInInspector]
            		private MyEnum MySerializedEnumArray = MyEnum[] { ... };
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.ValueDropdownList`1"/>
        </member>
        <member name="P:Sirenix.OdinInspector.ValueDropdownAttribute.MemberName">
            <summary>
            Name of any field, property or method member that implements IList. E.g. arrays or Lists.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownAttribute.#ctor(System.String)">
            <summary>
            Creates a dropdown menu for a property.
            </summary>
            <param name="memberName">Name of any field, property or method member that implements IList. E.g. arrays or Lists.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ValueDropdownList`1">
            <summary>
            Use this with <see cref="T:Sirenix.OdinInspector.ValueDropdownAttribute"/> to specify custom names for values.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownList`1.Add(System.String,`0)">
            <summary>
            Adds the specified value with a custom name.
            </summary>
            <param name="text">The name of the item.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownList`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ValueDropdownItem`1">
            <summary>
            Used by <see cref="T:Sirenix.OdinInspector.ValueDropdownList`1"/> for value dropdowns.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Sirenix.OdinInspector.ValueDropdownItem`1.Text">
            <summary>
            The name of the item.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.ValueDropdownItem`1.Value">
            <summary>
            The value of the item.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.ValueDropdownItem`1"/> class.
            </summary>
            <param name="text">The name of the item.</param>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownItem`1.ToString">
            <summary>
            The name of this item.
            </summary>
            <returns>
            The name of this item.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownItem`1.Equals(Sirenix.OdinInspector.ValueDropdownItem{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other item.</param>
            <returns><c>true</c> if equal. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownItem`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.ValueDropdownItem`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.ShowInInspectorAttribute">
             <summary>
             <para>ShowInInspector is used on any property, and shows the value in the inspector.</para>
             </summary>
             <remarks>
             <para>This can for example be combined with <see cref="T:Sirenix.OdinInspector.ReadOnlyAttribute"/> to allow for live debugging of values.</para>
             <note type="note"></note>
             </remarks>
             <example>
             <para>The following example shows how ShowInInspector is used to show properties in the inspector, that otherwise wouldn't.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[ShowInInspector]
            		private int myField;
            
            		[ShowInInspector]
            		public int MyProperty { get; set; }
            	}
             </code>
             </example>
        </member>
        <member name="T:Sirenix.OdinInspector.TabGroupAttribute">
             <summary>
             <para>TabGroup is used on any property, and organizes properties into different tabs.</para>
             <para>Use this to organize different value to make a clean and easy to use inspector.</para>
             </summary>
             <remarks>
             <para>Use the group to create multiple tab groups, each with multiple tabs.</para>
             <note type="note">Currently there is no label drawn for properties in tab groups, that only contain a single property.</note>
             </remarks>
             <example>
             <para>The following example shows how to create a tab group with two tabs.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		[TabGroup("First")]
            		public int MyFirstInt;
            
            		[TabGroup("First")]
            		public int AnotherInt;
            
            		[TabGroup("Second")]
            		public int MySecondInt;
            	}
             </code>
             </example>
             <example>
             <para>The following example shows how multiple groups of tabs can be created.</para>
             <code>
            	public class MyComponent : MonoBehaviour
            	{
            		[TabGroup("A", "FirstGroup")]
            		public int FirstGroupA;
            
            		[TabGroup("B", "FirstGroup")]
            		public int FirstGroupB;
            
            		// The second tab group has been configured to have constant height across all tabs.
            		[TabGroup("A", "SecondGroup", true)]
            		public int SecondgroupA;
            
            		[TabGroup("B", "SecondGroup")]
            		public int SecondGroupB;
            
            		[TabGroup("B", "SecondGroup")]
            		public int AnotherInt;
            	}
             </code>
             </example>
             <seealso cref="!:TabListAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.TabGroupAttribute.TabName">
            <summary>
            Name of the tab.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.TabGroupAttribute.Tabs">
            <summary>
            Name of all tabs in this group.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.TabGroupAttribute.UseFixedHeight">
            <summary>
            Should this tab be the same height as the rest of the tab group.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.TabGroupAttribute.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Organizes the property into the specified tab in the default group.
            </summary>
            <param name="tab">The tab.</param>
            <param name="useFixedHeight">if set to <c>true</c> [use fixed height].</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.TabGroupAttribute.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Organizes the property into the specified tab in the specified group.
            </summary>
            <param name="group">The group to attach the tab to.</param>
            <param name="tab">The name of the tab.</param>
            <param name="useFixedHeight">Set to true to have a constant height across the entire tab group.</param>
            <param name="order">The order of the group.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.TabGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)">
            <summary>
            Combines the tab group with another group.
            </summary>
            <param name="other">The other group.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.TitleAttribute">
             <summary>
             <para>Title is used to make a bold header above a property.</para>
             </summary>
             <remarks>
             <para>Title is identical to <see cref="T:UnityEngine.HeaderAttribute"/>, but also supports property and function members.</para>
             </remarks>
             <example>
             The following example shows how Title is used on different properties.
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[Title("Fields")]
            		public int MyIntField;
            
            		[Title("Properties")]
            		public int MyIntProperty { get; set; }
            
            		[Title("Functions"), Button]
            		private void MyButton()
            		{
            			// ...
            		}
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.ButtonAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.TitleAttribute.Title">
            <summary>
            The title displayed above the property in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.TitleAttribute.Bold">
            <summary>
            If <c>true</c> the title will be dispalyed with a bold font.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.TitleAttribute.#ctor(System.String,System.String,Sirenix.OdinInspector.TitleAlignments,System.Boolean,System.Boolean)">
            <summary>
            Creates a title above any property in the inspector.
            </summary>
            <param name="title">The title displayed above the property in the inspector.</param>
            <param name="bold">If <c>true</c> the title will be drawn with a bold font.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ToggleAttribute">
             <summary>
             <para>Toggle is used on any field or property, and allows to enable or disable the property in the inspector.</para>
             <para>Use this to create a property that can be turned off or on.</para>
             </summary>
             <remarks>
             <note type="note">Toggle does current not support any static members for toggling.</note>
             </remarks>
             <example>
             <para>The following example shows how Toggle is used to create a toggleable property.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		[Toggle("Enabled")]
            		public MyToggleable MyToggler = new MyToggleable();
            	}
            
            	public class MyToggleable
            	{
            		public bool Enabled;
            
            		public int MyValue;
            	}
             </code>
             </example>
             <seealso cref="!:ToggleListAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.ToggleAttribute.ToggleMemberName">
            <summary>
            Name of any bool field or property to enable or disable the object.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ToggleAttribute.CollapseOthersOnExpand">
            <summary>
            If true, all other open toggle groups will collapse once another one opens.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ToggleAttribute.#ctor(System.String)">
            <summary>
            Create a toggleable property in the inspector.
            </summary>
            <param name="toggleMemberName">Name of any bool field or property to enable or disable the object.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ToggleGroupAttribute">
             <summary>
             <para>ToggleGroup is used on any field, and create a toggleable group of options.</para>
             <para>Use this to create options that can be enabled or disabled.</para>
             </summary>
             <remarks>
             <para>The <see cref="P:Sirenix.OdinInspector.ToggleGroupAttribute.ToggleMemberName"/> functions as the ID for the ToggleGroup, and therefore all members of a toggle group must specify the same toggle member.</para>
             <note note="Note">This attribute does not support static members!</note>
             </remarks>
             <example>
             <para>The following example shows how ToggleGroup is used to create two seperate toggleable groups.</para>
             <code>
             public class MyComponent : MonoBehaviour
            	{
            		// This attribute has a title specified for the group. The title only needs to be applied to a single attribute for a group.
            		[ToggleGroup("FirstToggle", order: -1, groupTitle: "First")]
            		public bool FirstToggle;
            
            		[ToggleGroup("FirstToggle")]
            		public int MyInt;
            
            		// This group specifies a member string as the title of the group. A property or a function can also be used.
            		[ToggleGroup("SecondToggle", titleStringMemberName: "SecondGroupTitle")]
            		public bool SecondToggle { get; set; }
            
            		[ToggleGroup("SecondToggle")]
            		public float MyFloat;
            
            		[HideInInspector]
            		public string SecondGroupTitle = "Second";
            	}
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.ToggleAttribute"/>
             <seealso cref="!:ToggleListAttribute"/>"/>
        </member>
        <member name="M:Sirenix.OdinInspector.ToggleGroupAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a ToggleGroup. See <see cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>.
            </summary>
            <param name="toggleMemberName">Name of any bool field or property to enable or disable the ToggleGroup.</param>
            <param name="order">The order of the group.</param>
            <param name="groupTitle">Use this to name the group differently than toggleMemberName.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.ToggleGroupAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a ToggleGroup. See <see cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>.
            </summary>
            <param name="toggleMemberName">Name of any bool field or property to enable or disable the ToggleGroup.</param>
            <param name="groupTitle">Use this to name the group differently than toggleMemberName.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.ToggleGroupAttribute.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Obsolete constructor overload.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ToggleGroupAttribute.ToggleMemberName">
            <summary>
            Name of any bool field, property or function to enable or disable the ToggleGroup.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ToggleGroupAttribute.ToggleGroupTitle">
            <summary>
            Title of the toggle group in the inspector.
            If <c>null</c> <see cref="P:Sirenix.OdinInspector.ToggleGroupAttribute.ToggleMemberName"/> will be used instead.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ToggleGroupAttribute.TitleStringMemberName">
            <summary>
            Name of any string field, property or function, to title the toggle group in the inspector.
            If <c>null</c> <see cref="P:Sirenix.OdinInspector.ToggleGroupAttribute.ToggleGroupTitle"/> will be used instead.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ToggleGroupAttribute.CollapseOthersOnExpand">
            <summary>
            If true, all other open toggle groups will collapse once another one opens.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ToggleGroupAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)">
            <summary>
            Combines the ToggleGroup with another ToggleGroup.
            </summary>
            <param name="other">Another ToggleGroup.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.ValidateInputAttribute">
             <summary>
             <para>ValidateInput is used on any property, and allows to validate input from inspector.</para>
             <para>Use this to enforce correct values.</para>
             </summary>
             <remarks>
             <note type="note">ValidateInput refuses invalid values.</note>
             <note type="note">ValidateInput only works in the editor. Values changed through scripting will not be validated.</note>
             </remarks>
             <example>
             <para>The following examples shows how a speed value can be forced to be above 0.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[ValidateInput("ValidateInput")]
            		public float Speed;
            
            		// Specify custom output message and message type.
            		[ValidateInput("ValidateInput", "Health must be more than 0!", InfoMessageType.Warning)]
            		public float Health;
            
            		private bool ValidateInput(float property)
            		{
            			return property > 0f;
            		}
             }
             </code>
             </example>
             <example>
             <para>The following example shows how a static function could also be used.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[ValidateInput("StaticValidateFunction")]
            		public int MyInt;
            
            		private static bool StaticValidateFunction(int property)
            		{
            			return property != 0;
            		}
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.ValidateInputAttribute.#ctor(System.String,System.String,Sirenix.OdinInspector.InfoMessageType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/> class.
            </summary>
            <param name="memberName">Name of callback function to validate input. The function must have atleast one parameter of the same type as the property.</param>
            <param name="message">Output message for invalid values.</param>
            <param name="messageType">Type of the message.</param>
            <param name="rejectedInvalidInput">Rejects invalid inputs if set to <c>true</c>.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.ValidateInputAttribute.Message">
            <summary>
            Output message for invalid values.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ValidateInputAttribute.MemberName">
            <summary>
            Name of callback function to validate input. The function must have atleast one parameter of the same type as the property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ValidateInputAttribute.MessageType">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.ValidateInputAttribute.RejectInvalidInput">
            <summary>
            Rejects invalid inputs if set to <c>true</c>.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.ShowIfAttribute">
             <summary>
             <para>ShowIf is used on any property and can hide the property in the inspector.</para>
             <para>Use this to hide irrelevant properties based on the current state of the object.</para>
             </summary>
             <example>
             <para>This example shows a component with fields hidden by the state of another field.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		public bool ShowProperties;
            
            		[ShowIf("showProperties")]
            		public int MyInt;
            
            		[ShowIf("showProperties")]
            		public string MyString;
             }
             </code>
             </example>
             <example>
             <para>This example shows a component with a field that is hidden when the game object is inactive.</para>
             <code>
             public class MyComponent : MonoBehaviour
             {
            		[ShowIf("MyVisibleFunction")]
            		public int MyHideableField;
            
            		private bool MyVisibleFunction()
            		{
            			return this.gameObject.activeInHierarchy;
            		}
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.ShowIfAttribute.MemberName">
            <summary>
            Name of a bool field, property or function to show or hide the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.ShowIfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.ShowIfAttribute"/> class.
            </summary>
            <param name="memberName">Name of a bool field, property or function to show or hide the property.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.WrapAttribute">
            <summary>
            <para>Wrap is used on most primitive property, and allows for wrapping the value when it goes out of the defined range.</para>
            <para>Use this when you want a value that goes around in circle, like for example an angle.</para>
            </summary>
            <remarks>
            <note type="note">Currently unsigned primitives are not supported.</note>
            </remarks>
            <example>
            <para>The following example show how Wrap is used on a property.</para>
            <code>
            public class MyComponent : MonoBehaviour
            {
            	[Wrap(-100, 100)]
            	public float MyFloat;
            }
            </code>
            </example>
            <seealso cref="!:AngleWrapAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.WrapAttribute.Min">
            <summary>
            Lowest value for the property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.WrapAttribute.Max">
            <summary>
            Heighest value for the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.WrapAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Wraps the value of the property round when the values goes out of range.
            </summary>
            <param name="min">The lowest value for the property.</param>
            <param name="max">The highest value for the property.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.InfoMessageType">
            <summary>
            Type of info message box. This enum matches Unity's MessageType enum which could not be since it is located in the UnityEditor assembly.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InfoMessageType.None">
            <summary>
            Generic message box with no type.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InfoMessageType.Info">
            <summary>
            Information message box.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InfoMessageType.Warning">
            <summary>
            Warning message box.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.InfoMessageType.Error">
            <summary>
            Error message box.
            </summary>
        </member>
    </members>
</doc>
